// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using UniversalTennis.Algorithm.Data;
using UniversalTennis.Algorithm.Models;

namespace UniversalTennis.Algorithm.Migrations
{
    [DbContext(typeof(UniversalTennisContext))]
    [Migration("20171003213744_Update_PlayerEvent_Table")]
    partial class Update_PlayerEvent_Table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UniversalTennis.Algorithm.Models.AlgorithmSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Doc");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("AlgorithmSetting");
                });

            modelBuilder.Entity("UniversalTennis.Algorithm.Models.DailyRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Algorithm");

                    b.Property<DateTime>("Date");

                    b.Property<int>("PlayerRatingId");

                    b.Property<double>("Rating");

                    b.Property<double>("Reliability");

                    b.HasKey("Id");

                    b.HasIndex("PlayerRatingId");

                    b.ToTable("DailyRating");
                });

            modelBuilder.Entity("UniversalTennis.Algorithm.Models.PlayerEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("InfoDoc");

                    b.Property<int>("PlayerId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("PlayerEvent");
                });

            modelBuilder.Entity("UniversalTennis.Algorithm.Models.PlayerRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActiveDoublesResults");

                    b.Property<string>("ActiveSinglesResults");

                    b.Property<double?>("ActualRating");

                    b.Property<double?>("AlternativeRating");

                    b.Property<double?>("AlternativeRatingReliability");

                    b.Property<double?>("BenchmarkRating");

                    b.Property<double?>("CompetitiveMatchPct");

                    b.Property<double?>("CompetitiveMatchPctDoubles");

                    b.Property<double?>("DecisiveMatchPct");

                    b.Property<double?>("DoublesBenchmarkRating");

                    b.Property<double?>("DoublesRating");

                    b.Property<double?>("DoublesReliability");

                    b.Property<double?>("FinalDoublesRating");

                    b.Property<double?>("FinalRating");

                    b.Property<bool>("IsBenchmark");

                    b.Property<int>("PlayerId");

                    b.Property<double?>("PreviousLevel");

                    b.Property<double?>("PreviousRating");

                    b.Property<double?>("PreviousRatingReliability");

                    b.Property<double?>("PublishedRating");

                    b.Property<double?>("PublishedReliability");

                    b.Property<double?>("RatingReliability");

                    b.Property<double?>("RoutineMatchPct");

                    b.HasKey("Id");

                    b.ToTable("PlayerRating");
                });

            modelBuilder.Entity("UniversalTennis.Algorithm.Models.RatingJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("EndTime");

                    b.Property<int>("JobId");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Status");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("RatingJob");
                });

            modelBuilder.Entity("UniversalTennis.Algorithm.Models.RatingResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Loser1CalculatedRating");

                    b.Property<double?>("Loser1Rating");

                    b.Property<double?>("Loser1Reliability");

                    b.Property<double?>("Loser2CalculatedRating");

                    b.Property<double?>("Loser2Rating");

                    b.Property<double?>("Loser2Reliability");

                    b.Property<int>("ResultId");

                    b.Property<double?>("Winner1CalculatedRating");

                    b.Property<double?>("Winner1Rating");

                    b.Property<double?>("Winner1Reliability");

                    b.Property<double?>("Winner2CalculatedRating");

                    b.Property<double?>("Winner2Rating");

                    b.Property<double?>("Winner2Reliability");

                    b.HasKey("Id");

                    b.ToTable("RatingResult");
                });

            modelBuilder.Entity("UniversalTennis.Algorithm.Models.ResultEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("InfoDoc");

                    b.Property<int>("ResultId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("ResultEvent");
                });

            modelBuilder.Entity("UniversalTennis.Algorithm.Models.WeeklyAverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("PlayerRatingId");

                    b.Property<double>("Rating");

                    b.Property<int>("RatingStatus");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("PlayerRatingId");

                    b.ToTable("WeeklyAverage");
                });

            modelBuilder.Entity("UniversalTennis.Algorithm.Models.DailyRating", b =>
                {
                    b.HasOne("UniversalTennis.Algorithm.Models.PlayerRating", "PlayerRating")
                        .WithMany("DailyRatings")
                        .HasForeignKey("PlayerRatingId")
                        .HasConstraintName("FK_DailyRating_PlayerRating")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UniversalTennis.Algorithm.Models.WeeklyAverage", b =>
                {
                    b.HasOne("UniversalTennis.Algorithm.Models.PlayerRating", "PlayerRating")
                        .WithMany("WeeklyAverages")
                        .HasForeignKey("PlayerRatingId")
                        .HasConstraintName("FK_WeeklyAverage_PlayerRating")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
